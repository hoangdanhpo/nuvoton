C51 COMPILER V9.60.0.0   OLED_I2C                                                          04/13/2022 13:58:17 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED_I2C
OBJECT MODULE PLACED IN .\Objects\oled_i2c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SRC\oled_i2c.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\INC) DEFINE(FOSC_160000
                    -) DEBUG OBJECTEXTEND PRINT(.\Listings\oled_i2c.lst) TABS(2) OBJECT(.\Objects\oled_i2c.obj)

line level    source

   1            /******************************************************************************
   2            * @file           : oled_i2c.c
   3            * @brief          : Oled programming
   4            By Hoang Danh Nguyen - Email: hoangdanhpo@gmail.com
   5            ******************************************************************************/
   6          
   7          #include "MS51.h"
   8          #include "Common.h"
   9          #include "Delay.h"
  10          #include "SFR_Macro.h"
  11          #include "Function_define.h"
  12          #include "oled_i2c.h"
  13          #include "math.h"
  14          #include "oledfont.h"
  15          
  16          /**********************************************
  17          //IIC GPIO Init
  18          **********************************************/
  19          void Init_I2C(void)
  20          {
  21   1          P13_OpenDrain_Mode;         // Modify SCL pin to Open drain mode. don't forget the pull high resister in cir
             -cuit
  22   1          P14_OpenDrain_Mode;         // Modify SDA pin to Open drain mode. don't forget the pull high resister in cir
             -cuit
  23   1        
  24   1          /* Set I2C clock rate */
  25   1          I2CLK = I2C_CLOCK; 
  26   1      
  27   1          /* Enable I2C */
  28   1          set_I2CEN;                                   
  29   1      }
  30          
  31          
  32          /**********************************************
  33          //IIC Start
  34          **********************************************/
  35          void IIC_Start()
  36          {
  37   1      
  38   1        OLED_SCLK_Set() ;
  39   1        OLED_SDIN_Set();
  40   1        OLED_SDIN_Clr();
  41   1        OLED_SCLK_Clr();
  42   1      }
  43          
  44          /**********************************************
  45          //IIC Stop
  46          **********************************************/
  47          void IIC_Stop()
  48          {
  49   1        OLED_SCLK_Set() ;
  50   1        OLED_SDIN_Clr();
  51   1        OLED_SDIN_Set();  
  52   1      }
C51 COMPILER V9.60.0.0   OLED_I2C                                                          04/13/2022 13:58:17 PAGE 2   

  53          
  54          /**********************************************
  55          //IIC Ack
  56          **********************************************/
  57          void IIC_Wait_Ack()
  58          {
  59   1          while(1)
  60   1          {
  61   2            if(!SDA)        
  62   2            {
  63   3              break;
  64   3            }
  65   2          }
  66   1        OLED_SCLK_Set() ;
  67   1        OLED_SCLK_Clr();
  68   1      }
  69          /**********************************************
  70          // IIC Write byte
  71          **********************************************/
  72          
  73          void Write_IIC_Byte(unsigned char IIC_Byte)
  74          {
  75   1        unsigned char i;
  76   1        unsigned char m,da;
  77   1        da=IIC_Byte;
  78   1        OLED_SCLK_Clr();
  79   1        for(i=0;i<8;i++)    
  80   1        {
  81   2            m=da;
  82   2          m=m&0x80;
  83   2          if(m==0x80)
  84   2          {OLED_SDIN_Set();}
  85   2          else OLED_SDIN_Clr();
  86   2            da=da<<1;
  87   2          OLED_SCLK_Set();
  88   2          OLED_SCLK_Clr();
  89   2          }
  90   1      }
  91          /**********************************************
  92          // IIC Write Command
  93          **********************************************/
  94          void Write_IIC_Command(unsigned char IIC_Command)
  95          {
  96   1         IIC_Start();
  97   1         Write_IIC_Byte(0x78);            //Slave address,SA0=0
  98   1        IIC_Wait_Ack(); 
  99   1         Write_IIC_Byte(0x00);      //write command
 100   1        IIC_Wait_Ack(); 
 101   1         Write_IIC_Byte(IIC_Command); 
 102   1        IIC_Wait_Ack(); 
 103   1         IIC_Stop();
 104   1      }
 105          /**********************************************
 106          // IIC Write Data
 107          **********************************************/
 108          void Write_IIC_Data(unsigned char IIC_Data)
 109          {
 110   1         IIC_Start();
 111   1         Write_IIC_Byte(0x78);      //D/C#=0; R/W#=0
 112   1        IIC_Wait_Ack(); 
 113   1         Write_IIC_Byte(0x40);      //write data
 114   1        IIC_Wait_Ack(); 
C51 COMPILER V9.60.0.0   OLED_I2C                                                          04/13/2022 13:58:17 PAGE 3   

 115   1         Write_IIC_Byte(IIC_Data);
 116   1        IIC_Wait_Ack(); 
 117   1         IIC_Stop();
 118   1      }
 119          /**********************************************
 120          // IIC WriteReadCmd
 121          **********************************************/
 122          void OLED_WR_Byte(unsigned dat,unsigned cmd)
 123          {
 124   1        if(cmd)
 125   1            {
 126   2      
 127   2         Write_IIC_Data(dat);
 128   2         
 129   2          }
 130   1        else {
 131   2         Write_IIC_Command(dat);
 132   2          
 133   2        }
 134   1      }
 135          
 136          /********************************************
 137          // fill_Picture
 138          ********************************************/
 139          void fill_picture(unsigned char fill_Data)
 140          {
 141   1        unsigned char m,n;
 142   1        for(m=0;m<8;m++)
 143   1        {
 144   2          OLED_WR_Byte(0xb0+m,0);   //page0-page1
 145   2          OLED_WR_Byte(0x00,0);   //low column start address
 146   2          OLED_WR_Byte(0x10,0);   //high column start address
 147   2          for(n=0;n<128;n++)
 148   2            {
 149   3              OLED_WR_Byte(fill_Data,1);
 150   3            }
 151   2        }
 152   1      }
 153          //????
 154          
 155          void OLED_Set_Pos(unsigned char x, unsigned char y) 
 156          {   
 157   1        OLED_WR_Byte(0xb0+y,OLED_CMD);
 158   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 159   1        OLED_WR_Byte((x&0x0f),OLED_CMD); 
 160   1      }       
 161          //??OLED??    
 162          void OLED_Display_On(void)
 163          {
 164   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC
 165   1        OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 166   1        OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 167   1      }
 168          //??OLED??     
 169          void OLED_Display_Off(void)
 170          {
 171   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC
 172   1        OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 173   1        OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 174   1      } 
 175          
 176          
C51 COMPILER V9.60.0.0   OLED_I2C                                                          04/13/2022 13:58:17 PAGE 4   

 177          /********************************************
 178          // OLED Clear Display
 179          ********************************************/
 180          void OLED_Clear(void)  
 181          {  
 182   1        u8 i,n;       
 183   1        for(i=0;i<8;i++)  
 184   1        {  
 185   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    
 186   2          OLED_WR_Byte (0x00,OLED_CMD);      
 187   2          OLED_WR_Byte (0x10,OLED_CMD);        
 188   2          for(n=0;n<128;n++) OLED_WR_Byte(0,OLED_DATA); 
 189   2        } //????
 190   1      }
 191          
 192          /********************************************
 193          // OLED Update
 194          ********************************************/
 195          void OLED_Update(void)  
 196          {  
 197   1        u8 i,n;       
 198   1        for(i=0;i<8;i++)  
 199   1        {  
 200   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    
 201   2          OLED_WR_Byte (0x00,OLED_CMD);      
 202   2          OLED_WR_Byte (0x10,OLED_CMD);         
 203   2          for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA); 
 204   2        } 
 205   1      }
 206          
 207          /********************************************
 208          //OLED Display Char
 209          //x:0~127
 210          //y:0~63   
 211          //size:16/12 
 212          ********************************************/
 213          void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 Char_Size)
 214          {       
 215   1        unsigned char c=0,i=0;  
 216   1          c=chr-' ';//???????     
 217   1          if(x>Max_Column-1){x=0;y=y+2;}
 218   1          if(Char_Size ==16)
 219   1            {
 220   2            OLED_Set_Pos(x,y);  
 221   2            for(i=0;i<8;i++)
 222   2            OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 223   2            OLED_Set_Pos(x,y+1);
 224   2            for(i=0;i<8;i++)
 225   2            OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 226   2            }
 227   1            else {  
 228   2              OLED_Set_Pos(x,y);
 229   2              for(i=0;i<6;i++)
 230   2              OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 231   2              
 232   2            }
 233   1      }
 234          /********************************************
 235          //OLED Pow
 236          ********************************************/
 237          u32 oled_pow(u8 m,u8 n)
 238          {
C51 COMPILER V9.60.0.0   OLED_I2C                                                          04/13/2022 13:58:17 PAGE 5   

 239   1        u32 result=1;  
 240   1        while(n--)result*=m;    
 241   1        return result;
 242   1      }         
 243          
 244          /********************************************
 245          //OLED Display Number
 246          //x:0~127
 247          //y:0~63
 248          //num
 249          //len
 250          //size:16/12 
 251          ********************************************/
 252          void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 Num_size)
 253          {           
 254   1        u8 t,temp;
 255   1        u8 enshow=0;               
 256   1        for(t=0;t<len;t++)
 257   1        {
 258   2          temp=(num/oled_pow(10,len-t-1))%10;
 259   2          if(enshow==0&&t<(len-1))
 260   2          {
 261   3            if(temp==0)
 262   3            {
 263   4              OLED_ShowChar(x+(Num_size/2)*t,y,' ',Num_size);
 264   4              continue;
 265   4            }else enshow=1; 
 266   3             
 267   3          }
 268   2          OLED_ShowChar(x+(Num_size/2)*t,y,temp+'0',Num_size); 
 269   2        }
 270   1      } 
 271          
 272          /********************************************
 273          //Show a String
 274          ********************************************/
 275          void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 Char_Size)
 276          {
 277   1        unsigned char j=0;
 278   1        while (chr[j]!='\0')
 279   1        {   OLED_ShowChar(x,y,chr[j],Char_Size);
 280   2            x+=8;
 281   2          if(x>120){x=0;y+=2;}
 282   2            j++;
 283   2        }
 284   1      }
 285          
 286          /********************************************
 287          //Show Img
 288          ********************************************/
 289          void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[
             -])
 290          {   
 291   1       unsigned int j=0;
 292   1       unsigned char x,y;
 293   1        
 294   1        if(y1%8==0) y=y1/8;      
 295   1        else y=y1/8+1;
 296   1        for(y=y0;y<y1;y++)
 297   1        {
 298   2          OLED_Set_Pos(x0,y);
 299   2          for(x=x0;x<x1;x++)
C51 COMPILER V9.60.0.0   OLED_I2C                                                          04/13/2022 13:58:17 PAGE 6   

 300   2            {      
 301   3              OLED_WR_Byte(BMP[j++],OLED_DATA);       
 302   3            }
 303   2        }
 304   1      } 
 305          void OLED_ShowFloatNum(u8 x,u8 y,double v_floatNum_f32,u8 Float_Size)
 306          {           
 307   1        uint32_t v_temp_u32;
 308   1        v_temp_u32 = (uint32_t) v_floatNum_f32;
 309   1        OLED_ShowNum(x,y,v_temp_u32,2,Float_Size);
 310   1        OLED_ShowChar(x+20,y,'.',Float_Size);
 311   1        v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
 312   1        v_temp_u32 = v_floatNum_f32 * 10;
 313   1        OLED_ShowNum(x+25,y,v_temp_u32,1,Float_Size);
 314   1      } 
 315          /********************************************
 316          //Init OLED
 317          ********************************************/           
 318          void OLED_Init(void)
 319          {   
 320   1        Init_I2C();
 321   1        OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 322   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 323   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 324   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 325   1        OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 326   1        OLED_WR_Byte(0x81,OLED_CMD); // contract control
 327   1        OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 328   1        OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 329   1        OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 330   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 331   1        OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 332   1        OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 333   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 334   1        OLED_WR_Byte(0x00,OLED_CMD);//
 335   1        
 336   1        OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 337   1        OLED_WR_Byte(0x80,OLED_CMD);//
 338   1        
 339   1        OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 340   1        OLED_WR_Byte(0x05,OLED_CMD);//
 341   1        
 342   1        OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 343   1        OLED_WR_Byte(0xF1,OLED_CMD);//
 344   1        
 345   1        OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 346   1        OLED_WR_Byte(0x12,OLED_CMD);//
 347   1        
 348   1        OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 349   1        OLED_WR_Byte(0x30,OLED_CMD);//
 350   1        
 351   1        OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 352   1        OLED_WR_Byte(0x14,OLED_CMD);//
 353   1        
 354   1        OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 355   1      }  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1336    ----
   CONSTANT SIZE    =   2072    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   OLED_I2C                                                          04/13/2022 13:58:17 PAGE 7   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      48
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
